{"version":3,"sources":["LongTable.js","ScrollArrow.js","PatchRanking.js","App.js","reportWebVitals.js","Latex.js","index.js"],"names":["LongTable","title","caption","entries","useCorrect","className","Table","striped","bordered","hover","size","rowSpan","colSpan","map","entry","TableEntry","bug","pl3","crt3","mpl3","mcrt3","pl8","crt8","mpl8","mcrt8","ScrollArrow","useState","showScroll","setShowScroll","window","addEventListener","pageYOffset","onClick","scrollTo","top","behavior","style","height","display","PatchRanking","xiong","target","rel","href","le","gumtree","marginTop","marginBottom","String","raw","Entry","mpl","mcrt","ast","leven","df","cf","line","App","table1Title","table2Title","id","IntroClassEntries","DigitsEntries","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Latex","props","node","React","createRef","useEffect","renderMath","MathJax","Hub","Queue","current","ref","children","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e20988db.chunk.js","sourcesContent":["import React from 'react';\nimport Table from 'react-bootstrap/Table';\n\nexport default function LongTable({title, caption, entries, useCorrect}) {\n    return(\n        <div className=\"py-5 text-center\">\n            <h2>{title}</h2>\n            <p className=\"lead\">{caption}</p>\n            <div className=\"tableFixHead\">\n                <Table striped bordered hover size=\"sm\" >\n                    <thead className=\"thead-dark fixHead\">\n                        <tr>\n                            <th rowSpan={2} className=\"fixHead\">Bug</th>\n                            <th colSpan={4} className=\"fixHead\">3 Edit Templates</th>\n                            <th colSpan={4} className=\"fixHead\">8 Edit Templates</th>\n                        </tr>\n                        <tr>\n                            <th className=\"fixHead\">Plausible</th>\n                            <th className=\"fixHead\">{useCorrect ? \"Correct\" : \"Generalizable\"}</th>\n                            <th className=\"fixHead\">Minimized Plausible</th>\n                            <th className=\"fixHead\">{useCorrect ? \"Minimized Correct\" : \"Minimized Generalizable\"}</th>\n                            <th className=\"fixHead\">Plausible</th>\n                            <th className=\"fixHead\">{useCorrect ? \"Correct\" : \"Generalizable\"}</th>\n                            <th className=\"fixHead\">Minimized Plausible</th>\n                            <th className=\"fixHead\">{useCorrect ? \"Minimized Correct (Edits 1/2/3)\" : \"Minimized Generalizable (Edits 1/2/3)\"}</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {entries.map((entry) => (\n                            <TableEntry {...entry} />\n                        ))}\n                    </tbody>\n                </Table>\n            </div>\n        </div>\n    )\n}\n\nfunction TableEntry({ bug, pl3, crt3, mpl3, mcrt3, pl8, crt8, mpl8, mcrt8 }) {\n    return (\n        <tr>\n            <td>{bug}</td>\n            <td>{pl3}</td>\n            <td>{crt3}</td>\n            <td>{mpl3}</td>\n            <td>{mcrt3}</td>\n            <td>{pl8}</td>\n            <td>{crt8}</td>\n            <td>{mpl8}</td>\n            <td>{mcrt8}</td>\n        </tr>\n    )\n}\n","import React, {useState} from 'react';\nimport {FaArrowCircleUp} from 'react-icons/fa';\nimport './App.css';\n\n\nconst ScrollArrow = () =>{\n\n  const [showScroll, setShowScroll] = useState(false)\n\n  const checkScrollTop = () => {\n    if (!showScroll && window.pageYOffset > 400){\n      setShowScroll(true)\n    } else if (showScroll && window.pageYOffset <= 400){\n      setShowScroll(false)\n    }\n  };\n\n  const scrollTop = () =>{\n    window.scrollTo({top: 0, behavior: 'smooth'});\n  };\n\n  window.addEventListener('scroll', checkScrollTop)\n\n  return (\n        <FaArrowCircleUp className=\"scrollTop\" onClick={scrollTop} style={{height: 40, display: showScroll ? 'flex' : 'none'}}/>\n  );\n}\n\nexport default ScrollArrow;","import React from 'react';\nimport entries from './PatchRankingResults.json'\nimport Table from 'react-bootstrap/Table';\n\nexport default function PatchRanking() {\n    const xiong = <a target=\"_blank\" rel=\"noreferrer\" href=\"https://dl.acm.org/doi/10.1145/3180155.3180182\">Xiong et al.</a>;\n    const le = <a target=\"_blank\" rel=\"noreferrer\" href=\"https://dl.acm.org/doi/10.1145/3106237.3106309\">Le et al.</a>;\n    const gumtree = <a target=\"_blank\" rel=\"noreferrer\" href=\"https://dl.acm.org/doi/10.1145/2642937.2642982\">GumTree</a>;\n    return(\n        <>\n        <h1 style={{marginTop: \"2cm\", marginBottom: \"0.8cm\"}}>Distance and Penalty Functions for Patch Ranking</h1>\n\n        <p>{xiong}{String.raw` define a distance by computing the longest common\nsubsequence (LCS) of executed statements. We simulate their distance by using\nexecuted lines, and define \\(distance_{line}\\) as follows, where $t_p$ and\n$t_o$ represents the traces (as executed lines) of the patched and original\nprogram, respectively.`}</p>\n\n<p>{String.raw`\\[distance_{line}(t_{p}, t_{o}) = 1 - \\frac{|LCS(t_p, t_o)|}{max(|t_p|, |t_o|)}\\]`}</p>\n\n<p>{String.raw`\nWhile executed lines capture control flow information at a fine-grain level,\nwe can also compute a coarse-grain control-flow distance by counting how many\ncontrol flow branches were taken differently by the patched program. Hence,\nwe define $distance_{if}$ as follows, where $\\Delta_{if}$ computes the number\nof different control-flow branches and $\\bigcup_{if}$ computes the total number of\nunique control-flow decisions.\n`}</p>\n\n<p>{String.raw`\n    \\[distance_{if}(t_{p}, t_{o}) = \\frac{\\Delta_{if}(t_p, t_o)}{\\bigcup_{if}(t_p, t_o)}\\]\n`}</p>\n\n<p>{String.raw`\nFinally, we use data-flow information to define a distance based on changes\nto program state. We define $distance_{var}$ as follows, where $\\Delta_{var}$\ncomputes the number of variables and fields that are modified differently at\nany point in the execution, and $\\bigcup_{var}$ computes the total number of\nunique variables and fields.\n`}</p>\n\n<p>{String.raw`\n    \\[distance_{var}(t_{p}, t_{o}) = \\frac{\\Delta_{var}(t_p, t_o)}{\\bigcup_{var}(t_p, t_o)}\\]\n`}</p>\n\n<p>{String.raw`\nGiven these types of distance, we compute a penalty for each plausible\npatch as shown below, where $p$ and $o$ represent the patched\nprogram and the original program, $\\tau$ represents a test case, and\n$\\mathcal{T}_{pos}$ ($\\mathcal{T}_{neg}$) represents all the passing\n(failing) tests. Different types of distance can be plugged in to rank\npatches based on different dynamic information. Inspired by `}{xiong}{String.raw`, we treat positive tests and negative tests\ndifferently: For passing tests, we take the maximum distance among all\npassing tests, based on the intuition that passing tests should behave\nsimilarly to the original buggy program. Taking the maximum can help us\npenalize the patch for the most abnormal execution. For failing tests, we\ntake the average because the patched program is expected to behave\ndifferently, but how differently can vary across tests. Finally, we sum up\nthe penalties from positive tests and negative tests to compute a final\npenalty. All plausible patches are ranked in ascending order of penalty.\n`}</p>\n\n<p>{String.raw`\n\\begin{align*}\n    pos(p, o) &= max(\\{ distance^{\\tau}(t_p, t_o)\\ |\\ \\tau \\in \\mathcal{T}_{pos} \\})\\\\\n    neg(p, o) &= avg(\\{ distance^{\\tau}(t_p, t_o)\\ |\\ \\tau \\in \\mathcal{T}_{neg} \\})\\\\\n    penalty(p, o) &= neg(p, o) + pos(p, o)\n\\end{align*}\n`}</p>\n\n<p>{String.raw`\nAs baselines, we measure AST-based syntactic distance and Levenshtein\ndistance. Researchers have proposed different strategies for ranking\npatch candidates.`} {xiong} {String.raw` systematically analyzed\nexisting strategies and discovered that most of them target specific patch\ncategories (e.g., expression level patches) and thus cannot be applied to\ngeneral patches. We use the AST-based syntactic distance originally proposed\nby`} {le}{String.raw`, which is defined as the number of AST node changes needed\nto transform the original program to the patched version. We use `}{gumtree}{String.raw`\n to compute AST node changes. The\nintuition is to prioritize patches that are close to the original program.\nFollowing a similar intuition, we also use the Levenshtein distance as a\nbaseline by treating the original and patched programs as strings.\n`}</p>\n\n<p>In the following, we show the complete patch ranking results for the 24 IntroClassJava bugs.</p>\n\n<div className=\"text-center\">\n\n<h2>Table 9: Patch ranking results</h2>\n\n<p className=\"lead\">Numbers in the last 5 columns denote the rank of the first correct patch in the ranking. AST denotes ranking based on GumTree edit distance, Levenshtein based on Levenshtein distance, State based on state differences in assignments, CF based on branch differences in control-flow statements, and Line based on differences in executed lines.</p>\n\n<Table striped bordered hover size=\"sm\" >\n    <thead className=\"thead-dark fixHead\">\n        <tr>\n            <th>Bug</th>\n            <th>Minimized Plausible Patches</th>\n            <th>Minimized Correct Patches</th>\n            <th>AST</th>\n            <th>Levenshtein</th>\n            <th>State</th>\n            <th>CF</th>\n            <th>Line</th>\n        </tr>\n    </thead>\n    <tbody>\n        {entries.map((entry) => (\n            <Entry {...entry} /> \n        ))}\n        <tr>\n            <th>Top 1</th>\n            <td></td>\n            <td></td>\n            <td>4</td>\n            <td>4</td>\n            <td>6</td>\n            <td>5</td>\n            <td>6</td>\n        </tr>\n        <tr>\n            <th>Top 5</th>\n            <td></td>\n            <td></td>\n            <td>10</td>\n            <td>10</td>\n            <td>14</td>\n            <td>7</td>\n            <td>16</td>\n        </tr>\n        <tr>\n            <th>Top 10</th>\n            <td></td>\n            <td></td>\n            <td>13</td>\n            <td>13</td>\n            <td>16</td>\n            <td>14</td>\n            <td>23</td>\n        </tr>\n    </tbody>\n</Table>\n\n</div>\n        </>\n    )\n}\n\nfunction Entry({ bug, mpl, mcrt, ast, leven, df, cf, line }) {\n    return (\n        <tr>\n            <td>{bug}</td>\n            <td>{mpl}</td>\n            <td>{mcrt}</td>\n            <td>{ast}</td>\n            <td>{leven}</td>\n            <td>{df}</td>\n            <td>{cf}</td>\n            <td>{line}</td>\n        </tr>\n    )\n}","import React from 'react';\nimport './App.css';\nimport LongTable from './LongTable';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport IntroClassEntries from './introclass.json';\nimport DigitsEntries from './digits.json';\nimport ScrollTopArrow from './ScrollArrow';\nimport PatchRanking from './PatchRanking';\n\nfunction App() {\n  const table1Title = \"Table 10: Number of Patches for IntroClassJava (Excluding Digits)\";\n  const table2Title = \"Table 11: Number of Patches for Digits\";\n  return (\n    <div className=\"App bg-light\">\n      <header className=\"App-header\">\n        <h1>Supplementary Content</h1>\n        <a className=\"App-link\" href={`#patch_ranking`}>Patch Ranking</a>\n\n        <h1 style={{marginTop: \"3cm\"}}>Supplementary Data</h1>\n        <a className=\"App-link\" href={`#introclass`}>{table1Title}</a>\n        <a className=\"App-link\" href={`#digits`}>{table2Title}</a>\n      </header>\n      <body className=\"bg-light\">\n        <ScrollTopArrow />\n        <div className=\"container\">\n          <main>\n            <div id=\"patch_ranking\">\n              <PatchRanking />\n              <hr/>\n            </div>\n            <div id=\"introclass\">\n              <LongTable \n                title={table1Title} \n                caption=\"Each cell shows the number of patches generated by GenProg / VarFix. The last column break down the number of minimized correct patches by the number of composing edits from 1 edit to 3 edits.\"\n                entries={IntroClassEntries}\n                useCorrect={true}/>\n                <hr/>\n            </div>\n            <div id=\"digits\">\n              <LongTable \n                title={table2Title} \n                caption=\"Each cell shows the number of patches generated by GenProg / VarFix. The last column break down the number of minimized generalizable patches by the number of composing edits from 1 edit to 3 edits.\" \n                entries={DigitsEntries} \n                useCorrect={false} />\n            </div>\n          </main>\n        </div>\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useEffect } from 'react';\n\nfunction Latex(props) {\n  let node = React.createRef();\n  useEffect(() => {\n    renderMath();\n  });\n  const renderMath = () => {\n    window.MathJax.Hub.Queue([\n      \"Typeset\", \n      window.MathJax.Hub,\n      node.current\n   ]);\n  }\n  return (\n    <div ref={node}>\n      {props.children}\n    </div>\n  );\n}\n\nexport default Latex;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Latex from './Latex';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Latex><App /></Latex>\n    {/* <App /> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}